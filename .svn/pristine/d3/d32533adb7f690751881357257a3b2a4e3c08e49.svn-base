using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Vintagestory.API.Client;
using Vintagestory.API.Common;
using Vintagestory.API.Common.Entities;
using Vintagestory.API.Config;
using Vintagestory.API.Datastructures;
using Vintagestory.API.MathTools;
using Vintagestory.API.Server;
using Vintagestory.API.Util;
using Vintagestory.GameContent;
using Newtonsoft.Json;
using HarmonyLib;

namespace KRPGLib.Enchantment
{
    /// <summary>
    /// Holds all Enchantment data at runtime.
    /// </summary>
    public class EnchantmentProperties
    {
        public string Enchantable = "enchantable";
        public string ChillingID = "chilling";
        public string HarmID = "harm";
        public string HealID = "heal";
        public string IgniteID = "ignite";
        public string KnockbackID = "knockback";
        public string LightID = "light";
        public string LightningID = "lightning";
        public string PitID = "pit";

        public bool EnchantableVal = false;
        public int ChillingVal = 0;
        public int HarmVal = 0;
        public int HealVal = 0;
        public int IgniteVal = 0;
        public int KnockbackVal = 0;
        public int LightVal = 0;
        public int LightningVal = 0;
        public int PitVal = 0;

        /// <summary>
        /// Returns a copy.
        /// </summary>
        /// <returns></returns>
        public EnchantmentProperties Clone()
        {
            return new EnchantmentProperties()
            {
                Enchantable = Enchantable,
                ChillingID = ChillingID,
                HarmID = HarmID,
                HealID = HealID,
                IgniteID = IgniteID,
                KnockbackID = KnockbackID,
                LightID = LightID,
                LightningID = LightningID,
                PitID = PitID,

                EnchantableVal = EnchantableVal,
                ChillingVal = ChillingVal,
                HarmVal = HarmVal,
                HealVal = HealVal,
                IgniteVal = IgniteVal,
                KnockbackVal = KnockbackVal,
                LightVal = LightVal,
                LightningVal = LightningVal,
                PitVal = PitVal
            };
        }
    }

    public class EnchantmentBehavior : CollectibleBehavior
    {
        public ICoreAPI Api { get; protected set; }
        /// <summary>
        /// Class for storing default enchantment configuration. Do not save your active enchantments here.
        /// </summary>
        public EnchantmentProperties EnchantProps { get; protected set; }
        public ITreeAttribute Enchantments { get; protected set; }
        public EnchantmentBehavior(CollectibleObject collObj) : base(collObj)
        {
            this.EnchantProps = new EnchantmentProperties();
        }
        public override void OnLoaded(ICoreAPI api)
        {
            base.OnLoaded(api);
            Api = api;
        }
        #region Data
        public override void Initialize(JsonObject properties)
        {
            base.Initialize(properties);
            EnchantProps = properties.AsObject<EnchantmentProperties>(null, collObj.Code.Domain);
            GetProperties(properties);
            // Enchantments = (TreeAttribute)properties.ToAttribute();
            // GetTreeAttributes(Enchantments);
            // IAttribute Enchantments = collObj.Attributes["enchantments"].ToAttribute();
        }
        public override WorldInteraction[] GetHeldInteractionHelp(ItemSlot inSlot, ref EnumHandling handling)
        {
            handling = EnumHandling.PassThrough;
            return new WorldInteraction[]
            {
                new WorldInteraction
                {
                    //HotKeyCodes = StorageProps.SprintKey ? new string[] {"ctrl", "shift" } : new string[] {"shift"},
                    ActionLangCode = "heldhelp-enchantment",
                    MouseButton = EnumMouseButton.Right
                }
            };
        }
        /// <summary>
        /// Applies default JSON properties to EnchantProps.
        /// </summary>
        /// <param name="properties"></param>
        public virtual void GetProperties(JsonObject properties)
        {
            EnchantProps.EnchantableVal = properties["enchantable"].AsBool(false);
            EnchantProps.ChillingVal = properties["chilling"].AsInt(0);
            EnchantProps.HarmVal = properties["harm"].AsInt(0);
            EnchantProps.HealVal = properties["heal"].AsInt(0);
            EnchantProps.IgniteVal = properties["ignite"].AsInt(0);
            EnchantProps.KnockbackVal = properties["knockback"].AsInt(0);
            EnchantProps.LightVal = properties["light"].AsInt(0);
            EnchantProps.LightningVal = properties["lightning"].AsInt(0);
            EnchantProps.PitVal = properties["pit"].AsInt(0);
        }
        /// <summary>
        /// Save all EnchantProps to ItemStack's Attributes.
        /// </summary>
        /// <param name="itemStack"></param>
        public void SetAttributesFromProps(ItemStack itemStack)
        {
            itemStack.Attributes.GetOrAddTreeAttribute("enchantments");

            itemStack.Attributes.SetBool(EnchantProps.Enchantable, EnchantProps.EnchantableVal);
            itemStack.Attributes.SetInt(EnchantProps.ChillingID, EnchantProps.ChillingVal);
            itemStack.Attributes.SetInt(EnchantProps.HarmID, EnchantProps.HarmVal);
            itemStack.Attributes.SetInt(EnchantProps.HealID, EnchantProps.HealVal);
            itemStack.Attributes.SetInt(EnchantProps.IgniteID, EnchantProps.IgniteVal);
            itemStack.Attributes.SetInt(EnchantProps.KnockbackID, EnchantProps.KnockbackVal);
            itemStack.Attributes.SetInt(EnchantProps.LightID, EnchantProps.LightVal);
            itemStack.Attributes.SetInt(EnchantProps.LightningID, EnchantProps.LightningVal);
            itemStack.Attributes.SetInt(EnchantProps.PitID, EnchantProps.PitVal);
        }
        /// <summary>
        /// Gets Enchantment attributes from the ItemStack and writes to Enchant Properties
        /// </summary>
        /// <param name="itemStack"></param>
        public void GetAttributes(ItemStack itemStack)
        {
            var attr = itemStack.Attributes.GetOrAddTreeAttribute("enchantments");

            EnchantProps.EnchantableVal = itemStack.Attributes.GetBool(EnchantProps.Enchantable, false);
            EnchantProps.ChillingVal = itemStack.Attributes.GetInt(EnchantProps.ChillingID, 0);
            EnchantProps.HarmVal = itemStack.Attributes.GetInt(EnchantProps.HarmID, 0);
            EnchantProps.HealVal = itemStack.Attributes.GetInt(EnchantProps.HealID, 0);
            EnchantProps.IgniteVal = itemStack.Attributes.GetInt(EnchantProps.IgniteID, 0);
            EnchantProps.KnockbackVal = itemStack.Attributes.GetInt(EnchantProps.KnockbackID, 0);
            EnchantProps.LightVal = itemStack.Attributes.GetInt(EnchantProps.LightID, 0);
            EnchantProps.LightningVal = itemStack.Attributes.GetInt(EnchantProps.LightningID, 0);
            EnchantProps.PitVal = itemStack.Attributes.GetInt(EnchantProps.PitID, 0);
        }
        #endregion
        #region Effects
        /// <summary>
        /// Reduce the Entity's BodyTemperature to -10, multiplied by Power
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="power"></param>
        public void ChillEntity(Entity entity, int power)
        {
            EntityBehaviorBodyTemperature ebbt = entity.GetBehavior<EntityBehaviorBodyTemperature>();

            // If we encounter something without one, bail
            if (ebbt == null)
                return;

            ebbt.CurBodyTemperature = power * -10f;
        }
        /// <summary>
        /// Creates a 1x1x1 pit at the Pos, multiplied by Power. Only works only Soil, Sand, or Gravel
        /// </summary>
        /// <param name="pos"></param>
        /// <param name="byEntity"></param>
        /// <param name="power"></param>
        public void CreatePit(EntityPos pos, Entity byEntity, int power)
        {
            BlockPos bpos = pos.AsBlockPos;
            List<Vec3d> pitArea = new List<Vec3d>();

            for (int x = 0; x <= power; x++)
            {
                for (int y = 0; y <= power; y++)
                {
                    for (int z = 0; z <= power; z++)
                    {
                        pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z + z));
                        pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z - z));
                        pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z - z));
                        pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z + z));
                    }
                }
            }

            for (int i = 0; i < pitArea.Count; i++)
            {
                BlockPos ipos = bpos;
                ipos.Set(pitArea[i]);
                Block block = byEntity.World.BlockAccessor.GetBlock(ipos);

                if (block != null)
                {
                    string blockCode = block.Code.ToString();
                    if (blockCode.Contains("soil") || blockCode.Contains("sand") || blockCode.Contains("gravel"))
                        byEntity.World.BlockAccessor.BreakBlock(ipos, byEntity as IPlayer);
                }
            }
        }
        /// <summary>
        /// Attempts to slay the target instantly. Chance of success is multiplied by Power
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="byEntity"></param>
        /// <param name="power"></param>
        public void DeathPoison(Entity entity, DamageSource byEntity, int power)
        {
            Api.Event.TriggerEntityDeath(entity, byEntity);
        }
        /// <summary>
        /// Attempt to set the target on fire. Power not doing anything currently.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="power"></param>
        public void IgniteEntity(Entity entity, int power)
        {
            entity.IsOnFire = true;
            
        }
        /// <summary>
        /// Create a lightning strike at Pos. Power not doing anything currently
        /// </summary>
        /// <param name="world"></param>
        /// <param name="pos"></param>
        public void CallLightning(IWorldAccessor world, Vec3d pos, int power)
        {
            WeatherSystemServer weatherSystem = world.Api.ModLoader.GetModSystem<WeatherSystemServer>();
            // It should default to 0f. Stun should stop at 0.5. Absorbtion should start at 1f.
            if (weatherSystem != null)
                weatherSystem.SpawnLightningFlash(pos);
            else
                world.Api.Logger.Debug("Could not find Weather System!");
        }
        #endregion
    }
}
