using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text;
using HarmonyLib;
using Vintagestory.API.Common;
using Vintagestory.API.Common.Entities;
using Vintagestory.API.Config;
using Vintagestory.API.Datastructures;
using Vintagestory.API.MathTools;
using Vintagestory.API.Server;
using Vintagestory.API.Util;
using Vintagestory.GameContent;
using Vintagestory.ServerMods.WorldEdit;

namespace KRPGLib.Enchantment
{
    [HarmonyPatch(typeof(CollectibleObject))]
    internal class CollectibleObject_Patch
    {
        [HarmonyPatch("GetHeldItemInfo")]
        public static void Postfix(CollectibleObject __instance, ItemSlot inSlot, StringBuilder dsc)
        {
            // Check Attributes
            if (inSlot.Itemstack.Attributes.GetBool("enchantable", false) == true)
                dsc.AppendLine(string.Format("<font color=\"green\">" + Lang.Get("krpgenchantment:krpg-enchantable") + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("chilling", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-chilling-" + inSlot.Itemstack.Attributes.GetInt("chilling")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("harming", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-harming-" + inSlot.Itemstack.Attributes.GetInt("harming")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("healing", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-healing-" + inSlot.Itemstack.Attributes.GetInt("healing")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("igniting", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-igniting-" + inSlot.Itemstack.Attributes.GetInt("igniting")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("knockback", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-knockback-" + inSlot.Itemstack.Attributes.GetInt("knockback")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("light", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-light-" + inSlot.Itemstack.Attributes.GetInt("light")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("lightning", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-lightning-" + inSlot.Itemstack.Attributes.GetInt("lightning")) + "</font>"));
            if (inSlot.Itemstack.Attributes.GetInt("pit", 0) > 0)
                dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-pit-" + inSlot.Itemstack.Attributes.GetInt("pit")) + "</font>"));
        }

        [HarmonyPatch("OnAttackingWith")]
        public static void Postfix(CollectibleObject __instance, IWorldAccessor world, Entity byEntity, Entity attackedEntity, ItemSlot itemslot)
        {
            var power = 0;
            // Chilling
            power = itemslot.Itemstack.Attributes.GetInt("chilling", 0);
            if (power > 0)
            {
                EntityBehaviorBodyTemperature ebbt = attackedEntity.GetBehavior<EntityBehaviorBodyTemperature>();
                if (ebbt == null)
                    return;

                ebbt.CurBodyTemperature = power * -10f;
            }
            // Harming
            power = itemslot.Itemstack.Attributes.GetInt("harming", 0);
            if (power > 0)
            {
                DamageSource source = new DamageSource();
                source.SourceEntity = byEntity;
                source.Type = EnumDamageType.Injury;
                attackedEntity.ReceiveDamage(source, power);
                
            }
            // Healing
            power = itemslot.Itemstack.Attributes.GetInt("healing", 0);
            if (power > 0)
            {
                DamageSource source = new DamageSource();
                source.SourceEntity = byEntity;
                source.Type = EnumDamageType.Heal;
                attackedEntity.ReceiveDamage(source, -power);
            }
            // Igniting
            power = itemslot.Itemstack.Attributes.GetInt("igniting", 0);
            if (power > 0)
            {
                
                attackedEntity.IsOnFire = true;
            }
            // Knockback
            power = itemslot.Itemstack.Attributes.GetInt("knockback", 0);
            if (power > 0)
            {
                if (byEntity.SidedPos != null)
                {
                    Vec3d vec3d = (attackedEntity.SidedPos.XYZ - byEntity.SidedPos.XYZ);
                    vec3d.Y = 0.699999988079071;
                    float num = power * GameMath.Clamp((1f - attackedEntity.Properties.KnockbackResistance) / 10f, 0f, 1f);
                    attackedEntity.WatchedAttributes.SetFloat("onHurtDir", (float)Math.Atan2(vec3d.X, vec3d.Z));
                    attackedEntity.WatchedAttributes.SetDouble("kbdirX", vec3d.X * (double)num);
                    attackedEntity.WatchedAttributes.SetDouble("kbdirY", vec3d.Y * (double)num);
                    attackedEntity.WatchedAttributes.SetDouble("kbdirZ", vec3d.Z * (double)num);
                }
                else
                {
                    attackedEntity.WatchedAttributes.SetDouble("kbdirX", 0.0);
                    attackedEntity.WatchedAttributes.SetDouble("kbdirY", 0.0);
                    attackedEntity.WatchedAttributes.SetDouble("kbdirZ", 0.0);
                    attackedEntity.WatchedAttributes.SetFloat("onHurtDir", -999f);
                }
            }
            //if (eb.EnchantProps.Light > 0)

            // Call Lightning
            power = itemslot.Itemstack.Attributes.GetInt("lightning", 0);
            if (power > 0)
            {
                WeatherSystemServer weatherSystem = world.Api.ModLoader.GetModSystem<WeatherSystemServer>();
                // It should default to 0f. Stun should stop at 0.5. Absorbtion should start at 1f.
                if (weatherSystem != null)
                    weatherSystem.SpawnLightningFlash(attackedEntity.SidedPos.XYZ);
                else
                    world.Api.Logger.Debug("Could not find Weather System!");
            }

            // Create Pit
            power = itemslot.Itemstack.Attributes.GetInt("pit", 0);
            if (power > 0)
            {
                BlockPos bpos = attackedEntity.ServerPos.AsBlockPos;
                List<Vec3d> pitArea = new List<Vec3d>();

                for (int x = 0; x <= power; x++)
                {
                    for (int y = 0; y <= power; y++)
                    {
                        for (int z = 0; z <= power; z++)
                        {
                            pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z + z));
                            pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z - z));
                            pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z - z));
                            pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z + z));
                        }
                    }
                }

                for (int i = 0; i < pitArea.Count; i++)
                {
                    BlockPos ipos = bpos;
                    ipos.Set(pitArea[i]);
                    Block block = byEntity.World.BlockAccessor.GetBlock(ipos);

                    if (block != null)
                    {
                        string blockCode = block.Code.ToString();
                        if (blockCode.Contains("soil") || blockCode.Contains("sand") || blockCode.Contains("gravel"))
                            byEntity.World.BlockAccessor.BreakBlock(ipos, byEntity as IPlayer);
                    }
                }
            }
        }
    }
}
