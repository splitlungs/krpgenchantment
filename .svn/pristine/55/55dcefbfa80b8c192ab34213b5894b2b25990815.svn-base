using Cairo;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using Vintagestory.API.Client;
using Vintagestory.API.Common;
using Vintagestory.API.Config;
using Vintagestory.API.Datastructures;
using Vintagestory.API.MathTools;
using Vintagestory.API.Server;
using Vintagestory.API.Util;
using Vintagestory.GameContent;

namespace KRPGLib.Enchantment
{
    public class EnchantingBE : BlockEntityOpenableContainer
    {
        GuiDialogEnchantingBE clientDialog;
        EnchantingInventory inventory;
        public int msEnchantTime = 3000;
        public double inputEnchantTime;
        public double prevInputEnchantTime;
        public bool nowEnchanting;
        public bool invLocked;
        public ItemStack[] lockedInv = new ItemStack[3];
        public EnchantingRecipe CurrentRecipe;

        // Server side only
        Dictionary<string, long> playersEnchanting = new Dictionary<string, long>();
        // Client and serverside
        int quantityPlayersEnchanting;

        public string Material
        {
            get { return Block.LastCodePart(); }
        }
        // TODO: Conform to KRPGClasses
        public float EnchantSpeed
        {
            get
            {
                if (quantityPlayersEnchanting > 0) return 1f;

                // if (automated && mpc.Network != null) return mpc.TrueSpeed;

                return 0;
            }
        }
        public virtual float maxEnchantTime()
        {
            return 4;
        }
        public virtual string DialogTitle
        {
            get { return Lang.Get("krpgenchantment:block-krpg-enchanting-table"); }
        }
        public override string InventoryClassName
        {
            get { return Block.FirstCodePart(); }
        }
        public override InventoryBase Inventory
        {
            get { return inventory; }
        }
        public ItemSlot InputSlot
        {
            get { return inventory[0]; }
        }
        public ItemSlot OutputSlot
        {
            get { return inventory[1]; }
        }
        public ItemStack OutputStack
        {
            get { return inventory[1].Itemstack; }
            set { inventory[1].Itemstack = value; inventory[1].MarkDirty(); }
        }
        public ItemSlot ReagentSlot
        {
            get { return inventory[2]; }
        }
        public EnchantingBE()
        {
            inventory = new EnchantingInventory(null, null, this);
            inventory.SlotModified += OnSlotModified;
        }

        public override void Initialize(ICoreAPI api)
        {
            base.Initialize(api);

            inventory.LateInitialize(Block.FirstCodePart() + "-" + Pos.X + "/" + Pos.Y + "/" + Pos.Z, api);
            
            // Can we listen only when Enchanting? Maybe use an event?
            // if (api.Side == EnumAppSide.Server)
                // RegisterGameTickListener(TickEnchanting, msEnchantTime);
        }
        public override void CreateBehaviors(Block block, IWorldAccessor worldForResolve)
        {
            base.CreateBehaviors(block, worldForResolve);
        }
        private void enchantInput()
        {
            OutputSlot.MarkDirty();
        }
        public void IsEnchanting(IPlayer byPlayer)
        {
            SetPlayerEnchanting(byPlayer, true);
        }
        public void SetPlayerEnchanting(IPlayer player, bool playerEnchanting)
        {
                if (playerEnchanting)
                {
                    playersEnchanting[player.PlayerUID] = Api.World.ElapsedMilliseconds;
                }
                else
                {
                    playersEnchanting.Remove(player.PlayerUID);
                }

                quantityPlayersEnchanting = playersEnchanting.Count;

            updateEnchantingState();
        }
        bool beforeEnchanting;
        void updateEnchantingState()
        {
            if (Api.World == null) return;

            bool nowEnchanting = quantityPlayersEnchanting > 0;
            // bool nowEnchanting = true;

            if (nowEnchanting != beforeEnchanting)
            {
                Api.World.BlockAccessor.MarkBlockDirty(Pos);

                if (Api.Side == EnumAppSide.Server)
                {
                    MarkDirty();
                    Api.World.BlockAccessor.MarkBlockEntityDirty(Pos);
                }
            }

            beforeEnchanting = nowEnchanting;
        }
        public void BeginEnchanting()
        {
            if (!inventory.CanEnchant()) return;
            invLocked = true;
            updateEnchantingState();
        }
        private void TickEnchanting(float dt)
        {
            if (Api.Side == EnumAppSide.Server && (EnchantSpeed > 0 || prevInputEnchantTime != inputEnchantTime) && InputSlot.Itemstack?.Collectible?.HasBehavior<EnchantmentBehavior>() != null)  //don't spam update packets when empty, as inputEnchantTime is irrelevant when empty
            {
                MarkDirty();
            }

            prevInputEnchantTime = inputEnchantTime;

            foreach (var val in playersEnchanting)
            {
                long ellapsedMs = Api.World.ElapsedMilliseconds;
                if (ellapsedMs - val.Value > 1000)
                {
                    playersEnchanting.Remove(val.Key);
                    break;
                }
            }

            float enchantSpeed = EnchantSpeed;

            // Only tick on the server and merely sync to client

            // Use up reagent
            if (CanEnchant && enchantSpeed > 0)
            {
                inputEnchantTime += dt * enchantSpeed;

                if (inputEnchantTime >= maxEnchantTime())
                {
                    enchantInput();
                    inputEnchantTime = 0;
                }

                MarkDirty();
            }
        }
        public bool CanEnchant
        {
            get
            {
                // Input slot
                var inputEnchantable = inventory.Slots[0].Itemstack.Collectible.Attributes["enchantable"].AsBool(false);
                if (!inputEnchantable) return false;
                // Reagent Slot
                // bool outputEnchanted = false;
                // int enchants = 0;
                EnchantmentBehavior eb = inventory.Slots[2].Itemstack.Collectible.GetCollectibleBehavior<EnchantmentBehavior>(false);
                for (int i = 0; i < eb.Enchantments.Count; i++)
                {
                    //if (eb.Enchantments.)
                }
                return true;
            }
        }
        public void StopEnchanting()
        {
            invLocked = false;
        }
        public void CompleteEnchanting()
        {
            invLocked = false;
        }
        bool ignoreChange = false;
        private void OnSlotModified(int slotid)
        {
            if (Api is ICoreClientAPI)
            {
                clientDialog.Update(inputEnchantTime, maxEnchantTime(), GetOutputText());
            }

            if (slotid == 0 || slotid > 1)
            {
                inputEnchantTime = 0.0d; //reset the progress to 0 if any of the input is changed.
                MarkDirty();

                if (clientDialog != null && clientDialog.IsOpened())
                {
                    clientDialog.SingleComposer.ReCompose();
                }
            }
        }
        
        private void FindMatchingRecipe()
        {
            ItemSlot[] inputSlots = new ItemSlot[] { inventory[0], inventory[1] };
            CurrentRecipe = null;
            //EnchantingRecipeSystem ers = Api.ModLoader.GetModSystem<EnchantingRecipeSystem>();
            foreach (EnchantingRecipe recipe in EnchantingRecipeSystem.EnchantingRecipes)
            {
                int outsize;

                if (recipe.Matches(inputSlots, out outsize))
                {
                    ignoreChange = true;

                    if (Api?.Side == EnumAppSide.Server)
                    {
                        recipe.TryCraftNow(Api, inputEnchantTime, inputSlots);
                        MarkDirty(true);
                        Api.World.BlockAccessor.MarkBlockEntityDirty(Pos);
                    }

                    clientDialog.Update(inputEnchantTime, maxEnchantTime(), GetOutputText());

                    ignoreChange = false;
                    return;
                }
            }
        }
        public EnchantingRecipe GetMatchingEnchantingRecipe(ItemSlot[] slots)
        {
            EnchantingRecipeSystem ers = Api.ModLoader.GetModSystem<EnchantingRecipeSystem>(false);
            if (!(ers != null)) return null;

            for (int j = 0; j < EnchantingRecipeSystem.EnchantingRecipes.Count; j++)
            {
                int outsize;
                if (EnchantingRecipeSystem.EnchantingRecipes[j].Matches(slots, out outsize))
                {
                    return EnchantingRecipeSystem.EnchantingRecipes[j];
                }
            }
            return null;
        }
        public string GetOutputText()
        {
            ItemSlot[] fakeSlots = new ItemSlot[0];
            //CookingRecipe recipe = GetMatchingEnchantRecipe(Api.World, IgnoredStacks);
            EnchantingRecipe erecipe = GetMatchingEnchantingRecipe(fakeSlots);
            string locked = invLocked ? Lang.Get("krpgenchantment:krpg-enchanter-locked") : "";

            if (erecipe != null)
            {
                // return locked + erecipe.GetOutputName();
                return locked + erecipe.Name;
            }

            return locked;
        }
        protected void toggleInventoryDialogClient(IPlayer byPlayer)
        {
            clientDialog = new GuiDialogEnchantingBE(DialogTitle, Inventory, Pos, Api as ICoreClientAPI);
            clientDialog.TryOpen();
            clientDialog.OnClosed += () => clientDialog = null;
            clientDialog.Update(inputEnchantTime, maxEnchantTime(), GetOutputText());

            if (clientDialog == null)
            {
                ICoreClientAPI capi = Api as ICoreClientAPI;
                clientDialog = new GuiDialogEnchantingBE(Lang.Get("krpgenchantment:block-krpg-enchanting-table"), Inventory, Pos, Api as ICoreClientAPI);
                clientDialog.OnClosed += () =>
                {
                    clientDialog = null;
                    capi.Network.SendBlockEntityPacket(Pos.X, Pos.Y, Pos.Z, (int)EnumBlockEntityPacketId.Close, null);
                    capi.Network.SendPacketClient(Inventory.Close(byPlayer));
                };
                clientDialog.OpenSound = AssetLocation.Create("sounds/block/barrelopen", Block.Code.Domain);
                clientDialog.CloseSound = AssetLocation.Create("sounds/block/barrelclose", Block.Code.Domain);

                clientDialog.TryOpen();
                capi.Network.SendPacketClient(Inventory.Open(byPlayer));
                capi.Network.SendBlockEntityPacket(Pos.X, Pos.Y, Pos.Z, (int)EnumBlockEntityPacketId.Open, null);
            }
            else
            {
                clientDialog.TryClose();
            }
        }
        public override void FromTreeAttributes(ITreeAttribute tree, IWorldAccessor worldForResolving)
        {
            if (Api != null && Api.Side == EnumAppSide.Client)
            {
                MarkDirty(true);
            }

            base.FromTreeAttributes(tree, worldForResolving);
        }
        public override void ToTreeAttributes(ITreeAttribute tree)
        {
            base.ToTreeAttributes(tree);

            if (Block != null) tree.SetString("forBlockCode", Block.Code.ToShortString());
        }
        public override bool OnPlayerRightClick(IPlayer byPlayer, BlockSelection blockSel)
        {
            if (blockSel.SelectionBoxIndex == 1) return false;

            if (Api.World is IServerWorldAccessor)
            {
                ((ICoreServerAPI)Api).Network.SendBlockEntityPacket(
                    (IServerPlayer)byPlayer,
                    Pos.X, Pos.Y, Pos.Z,
                    (int)EnumBlockEntityPacketId.Open,
                    null
                );

                byPlayer.InventoryManager.OpenInventory(inventory);
                MarkDirty();
            }

            return true;
        }
        public override void OnReceivedClientPacket(IPlayer player, int packetid, byte[] data)
        {
            if (packetid < 1000)
            {
                Inventory.InvNetworkUtil.HandleClientPacket(player, packetid, data);

                // Tell server to save this chunk to disk again
                Api.World.BlockAccessor.GetChunkAtBlockPos(Pos).MarkModified();

                return;
            }

            if (packetid == (int)EnumBlockEntityPacketId.Close)
            {
                player.InventoryManager?.CloseInventory(Inventory);
            }

            if (packetid == (int)EnumBlockEntityPacketId.Open)
            {
                player.InventoryManager?.OpenInventory(Inventory);
            }

            if (packetid == 1337)
            {
                BeginEnchanting();
            }
        }
        public override void OnReceivedServerPacket(int packetid, byte[] data)
        {
            if (packetid == (int)EnumBlockEntityPacketId.Open && (clientDialog == null || !clientDialog.IsOpened()))
            {
                clientDialog = new GuiDialogEnchantingBE(DialogTitle, Inventory, Pos, Api as ICoreClientAPI);
                clientDialog.TryOpen();
                clientDialog.OnClosed += () => clientDialog = null;
                clientDialog.Update(inputEnchantTime, maxEnchantTime(), GetOutputText());
            }

            if (packetid == (int)EnumBlockEntityPacketId.Close)
            {
                (Api.World as IClientWorldAccessor).Player.InventoryManager.CloseInventory(Inventory);
                clientDialog?.TryClose();
                clientDialog?.Dispose();
                clientDialog = null;
            }
        }
        public override void OnBlockBroken(IPlayer byPlayer = null)
        {
            base.OnBlockBroken(byPlayer);

            invDialog?.TryClose();
            invDialog = null;
        }
    }
}