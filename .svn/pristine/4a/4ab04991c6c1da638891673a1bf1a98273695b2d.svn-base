using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HarmonyLib;
using Vintagestory.API.Common;
using Vintagestory.API.Common.Entities;
using Vintagestory.API.Config;
using Vintagestory.API.Datastructures;
using Vintagestory.API.MathTools;
using Vintagestory.API.Server;
using Vintagestory.GameContent;

namespace KRPGLib.Enchantment
{
    [HarmonyPatch(typeof(CollectibleObject))]
    internal class CollectibleObject_Patch
    {
        [HarmonyPatch("GetHeldItemInfo")]
        public static void Postfix(CollectibleObject __instance, ItemSlot inSlot, StringBuilder dsc)
        {
            // Check Attributes
            var attr = inSlot.Itemstack.Attributes.GetTreeAttribute("enchantments");
            
            if (attr != null)
            {
                if (inSlot.Itemstack.Attributes.GetBool("enchantable", false) == true)
                    dsc.AppendLine(string.Format("<font color=\"green\">" + Lang.Get("krpgenchantment:krpg-enchantable") + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("chilling", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-chilling-" + inSlot.Itemstack.Attributes.GetInt("chilling")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("harming", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-harming-" + inSlot.Itemstack.Attributes.GetInt("harming")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("healing", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-healing-" + inSlot.Itemstack.Attributes.GetInt("healing")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("igniting", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-igniting-" + inSlot.Itemstack.Attributes.GetInt("igniting")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("knockback", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-knockback-" + inSlot.Itemstack.Attributes.GetInt("knockback")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("light", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-light-" + inSlot.Itemstack.Attributes.GetInt("light")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("lightning", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-lightning-" + inSlot.Itemstack.Attributes.GetInt("lightning")) + "</font>"));
                if (inSlot.Itemstack.Attributes.GetInt("pit", 0) > 0)
                    dsc.AppendLine(string.Format("<font color=\"cyan\">" + Lang.Get("krpgenchantment:enchantment-pit-" + inSlot.Itemstack.Attributes.GetInt("pit")) + "</font>"));
            }
        }

        // public virtual void OnAttackingWith(IWorldAccessor world, Entity byEntity, Entity attackedEntity, ItemSlot itemslot);
        [HarmonyPatch("OnAttackingWith")]
        public static void Postfix(CollectibleObject __instance, IWorldAccessor world, Entity byEntity, Entity attackedEntity, ItemSlot itemslot)
        {
            // Check Attributes
            var attr = itemslot.Itemstack.Attributes.GetTreeAttribute("enchantments");

            if (attr != null)
            {
                // Chilling
                if (itemslot.Itemstack.Attributes.GetInt("chilling", 0) > 0)
                {
                    EntityBehaviorBodyTemperature ebbt = attackedEntity.GetBehavior<EntityBehaviorBodyTemperature>();

                    // If we encounter something without one, bail
                    if (ebbt == null)
                        return;

                    ebbt.CurBodyTemperature = -40f;
                }

                //if (eb.EnchantProps.Harm > 0)

                //if (eb.EnchantProps.Heal > 0)

                // Igniting
                if (itemslot.Itemstack.Attributes.GetInt("igniting", 0) > 0)
                    attackedEntity.IsOnFire = true;

                //if (eb.EnchantProps.Knockback > 0)

                //if (eb.EnchantProps.Light > 0)

                // Call Lightning
                if (itemslot.Itemstack.Attributes.GetInt("lightning", 0) > 0)
                {
                    WeatherSystemServer weatherSystem = world.Api.ModLoader.GetModSystem<WeatherSystemServer>();
                    // It should default to 0f. Stun should stop at 0.5. Absorbtion should start at 1f.
                    if (weatherSystem != null)
                        weatherSystem.SpawnLightningFlash(attackedEntity.SidedPos.XYZ);
                    else
                        world.Api.Logger.Debug("Could not find Weather System!");
                }

                // Create Pit
                if (itemslot.Itemstack.Attributes.GetInt("pit", 0) > 0)
                {
                    int power = itemslot.Itemstack.Attributes.GetInt("pit", 0);

                    BlockPos bpos = attackedEntity.ServerPos.AsBlockPos;
                    List<Vec3d> pitArea = new List<Vec3d>();

                    for (int x = 0; x <= power; x++)
                    {
                        for (int y = 0; y <= power; y++)
                        {
                            for (int z = 0; z <= power; z++)
                            {
                                pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z + z));
                                pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z - z));
                                pitArea.Add(new Vec3d(bpos.X + x, bpos.Y - y, bpos.Z - z));
                                pitArea.Add(new Vec3d(bpos.X - x, bpos.Y - y, bpos.Z + z));
                            }
                        }
                    }

                    for (int i = 0; i < pitArea.Count; i++)
                    {
                        BlockPos ipos = bpos;
                        ipos.Set(pitArea[i]);
                        Block block = byEntity.World.BlockAccessor.GetBlock(ipos);

                        if (block != null)
                        {
                            string blockCode = block.Code.ToString();
                            if (blockCode.Contains("soil") || blockCode.Contains("sand") || blockCode.Contains("gravel"))
                                byEntity.World.BlockAccessor.BreakBlock(ipos, byEntity as IPlayer);
                        }
                    }
                }
            }
        }
    }
}
