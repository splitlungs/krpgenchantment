using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KRPGLib.Enchantment
{
    #region Recipe
    internal class EnchantingRecipeDepr
    {
        // DEPRECATED
        /*
        //public EnchantingRecipeIngredient[] Ingredients;
        //public EnchantingRecipeIngredient[] ValidTargets;
        // Dummy data to satisfy IRecipeBase ?
        // public EnchantingRecipeOutput Output;

        // IRecipeIngredient[] IRecipeBase<EnchantingRecipe>.Ingredients => Ingredients;
        // IRecipeOutput IRecipeBase<EnchantingRecipe>.Output => Output;

        public bool Matches(ItemSlot[] inputSlots, out int outputStackSize)
        {
            outputStackSize = 0;

            List<KeyValuePair<ItemSlot, EnchantingRecipeIngredient>> matched = pairInput(inputSlots);
            if (matched == null) return false;

            outputStackSize = getOutputSize(matched);

            return outputStackSize >= 0;
        }

        List<KeyValuePair<ItemSlot, EnchantingRecipeIngredient>> pairInput(ItemSlot[] inputStacks)
        {
            List<EnchantingRecipeIngredient> ingredientList = new List<EnchantingRecipeIngredient>(Ingredients);

            Queue<ItemSlot> inputSlotsList = new Queue<ItemSlot>();
            foreach (var val in inputStacks) if (!val.Empty) inputSlotsList.Enqueue(val);

            if (inputSlotsList.Count != Ingredients.Length) return null;

            List<KeyValuePair<ItemSlot, EnchantingRecipeIngredient>> matched = new List<KeyValuePair<ItemSlot, EnchantingRecipeIngredient>>();

            while (inputSlotsList.Count > 0)
            {
                ItemSlot inputSlot = inputSlotsList.Dequeue();
                bool found = false;

                for (int i = 0; i < ingredientList.Count; i++)
                {
                    EnchantingRecipeIngredient ingred = ingredientList[i];

                    if (ingred.SatisfiesAsIngredient(inputSlot.Itemstack))
                    {
                        matched.Add(new KeyValuePair<ItemSlot, EnchantingRecipeIngredient>(inputSlot, ingred));
                        found = true;
                        ingredientList.RemoveAt(i);
                        break;
                    }
                }

                if (!found) return null;
            }

            // We're missing ingredients
            if (ingredientList.Count > 0)
            {
                return null;
            }

            return matched;
        }

        int getOutputSize(List<KeyValuePair<ItemSlot, EnchantingRecipeIngredient>> matched)
        {
            int outQuantityMul = -1;

            foreach (var val in matched)
            {
                ItemSlot inputSlot = val.Key;
                EnchantingRecipeIngredient ingred = val.Value;

                if (ingred.ConsumeQuantity == null)
                {
                    outQuantityMul = inputSlot.StackSize / ingred.Quantity;
                }
            }

            if (outQuantityMul == -1)
            {
                return -1;
            }


            foreach (var val in matched)
            {
                ItemSlot inputSlot = val.Key;
                EnchantingRecipeIngredient ingred = val.Value;

                if (ingred.ConsumeQuantity == null)
                {
                    // Input stack size must be equal or a multiple of the ingredient stack size
                    if ((inputSlot.StackSize % ingred.Quantity) != 0) return -1;

                    // Ingredients must be at the same ratio
                    if (outQuantityMul != inputSlot.StackSize / ingred.Quantity) return -1;

                }
                else
                {
                    // Must have same or more than the total crafted amount
                    if (inputSlot.StackSize < ingred.Quantity * outQuantityMul) return -1;
                }
            }

            return Output.StackSize * outQuantityMul;
        }

        public bool TryCraftNow(ICoreAPI api, double nowProcessedHours, ItemSlot[] inputslots)
        {
            if (processingHours > 0 && nowProcessedHours < processingHours) return false;

            var matched = pairInput(inputslots);

            ItemStack mixedStack = Output.ResolvedItemstack.Clone();
            mixedStack.StackSize = getOutputSize(matched);

            if (mixedStack.StackSize < 0) return false;

            // Carry over freshness
            TransitionableProperties[] props = mixedStack.Collectible.GetTransitionableProperties(api.World, mixedStack, null);
            TransitionableProperties perishProps = props != null && props.Length > 0 ? props[0] : null;

            if (perishProps != null)
            {
                CollectibleObject.CarryOverFreshness(api, inputslots, new ItemStack[] { mixedStack }, perishProps);
            }

            ItemStack remainStack = null;
            foreach (var val in matched)
            {
                if (val.Value.ConsumeQuantity != null)
                {
                    remainStack = val.Key.Itemstack;
                    remainStack.StackSize -= (int)val.Value.ConsumeQuantity * (mixedStack.StackSize / Output.StackSize);
                    if (remainStack.StackSize <= 0)
                    {
                        remainStack = null;
                    }
                    break;
                }
            }

            // Slot 0: Input/Item slot
            // Slot 1: Liquid slot
            if (shouldBeInLiquidSlot(mixedStack))
            {
                inputslots[0].Itemstack = remainStack;
                inputslots[1].Itemstack = mixedStack;
            }
            else
            {
                inputslots[1].Itemstack = remainStack;
                inputslots[0].Itemstack = mixedStack;
            }

            inputslots[0].MarkDirty();
            inputslots[1].MarkDirty();

            return true;
        }

        // Minor Fugly hack - copied from LiquidContainer.cs
        public bool shouldBeInLiquidSlot(ItemStack stack)
        {
            return stack?.ItemAttributes?["waterTightContainerProps"].Exists == true;
        }

        /// <summary>
        /// Creates a deep copy.
        /// </summary>
        /// <returns></returns>
        public EnchantingRecipe Clone()
        {
            EnchantingRecipeIngredient[] ingredients = new EnchantingRecipeIngredient[Ingredients.Length];
            for (int i = 0; i < Ingredients.Length; i++)
            {
                ingredients[i] = Ingredients[i].Clone();
            }
            
            EnchantingRecipeIngredient[] validTargets = new EnchantingRecipeIngredient[ValidTargets.Length];
            for (int i = 0; i < ValidTargets.Length; i++)
            {
                validTargets[i] = ValidTargets[i].Clone();
            }
            EnchantingRecipeOutput[] enchantments = new EnchantingRecipeOutput[Enchantments.Length];
            for (int i = 0; i < Enchantments.Length;)
            {
                enchantments[i] = Enchantments[i].Clone();
            }
            
            EnchantingRecipeOutput[] output = new EnchantingRecipeOutput[Output.Length];
            for (int i = 0; i < Output.Length;)
            {
                output[i] = Output[i].Clone();
            }
            return new EnchantingRecipe()
            {
                RecipeId = RecipeId,
                Enabled = Enabled,
                Name = Name,
                code = code,
                processingHours = processingHours,
                Ingredients = ingredients,
                Enchantments = enchantments,
                Output = Output
                //ValidTargets = validTargets,

            };
        }
        /// <summary>
        /// Resolves Wildcards in the ingredients
        /// </summary>
        /// <param name="world"></param>
        /// <returns></returns>
        public Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world)
        {
            Dictionary<string, string[]> mappings = new Dictionary<string, string[]>();

            if (Ingredients == null || Ingredients.Length == 0) return mappings;

            foreach (var ingred in Ingredients)
            {
                if (!ingred.Code.Path.Contains('*')) continue;

                int wildcardStartLen = ingred.Code.Path.IndexOf('*');
                int wildcardEndLen = ingred.Code.Path.Length - wildcardStartLen - 1;

                List<string> codes = new List<string>();

                if (ingred.Type == EnumItemClass.Block)
                {
                    for (int i = 0; i < world.Blocks.Count; i++)
                    {
                        if (world.Blocks[i].Code == null || world.Blocks[i].IsMissing) continue;

                        if (WildcardUtil.Match(ingred.Code, world.Blocks[i].Code))
                        {
                            string code = world.Blocks[i].Code.Path.Substring(wildcardStartLen);
                            string codepart = code.Substring(0, code.Length - wildcardEndLen);
                            if (ingred.AllowedVariants != null && !ingred.AllowedVariants.Contains(codepart)) continue;

                            codes.Add(codepart);

                        }
                    }
                }
                else
                {
                    for (int i = 0; i < world.Items.Count; i++)
                    {
                        if (world.Items[i].Code == null || world.Items[i].IsMissing) continue;

                        if (WildcardUtil.Match(ingred.Code, world.Items[i].Code))
                        {
                            string code = world.Items[i].Code.Path.Substring(wildcardStartLen);
                            string codepart = code.Substring(0, code.Length - wildcardEndLen);
                            if (ingred.AllowedVariants != null && !ingred.AllowedVariants.Contains(codepart)) continue;

                            codes.Add(codepart);
                        }
                    }
                }

                mappings[ingred.Name ?? "wildcard" + mappings.Count] = codes.ToArray();
            }

            return mappings;
        }

        public bool Resolve(IWorldAccessor world, string sourceForErrorLogging)
        {
            bool ok = true;

            for (int i = 0; i < Ingredients.Length; i++)
            {
                ok &= Ingredients[i].Resolve(world, sourceForErrorLogging);
            }

            for (int i = 0; i < ValidTargets.Length; i++)
            {
                ok &= ValidTargets[i].Resolve(world, sourceForErrorLogging);
            }
            for (int i = 0; i < Enchantments.Length; i++)
            {
                ok &= Enchantments[i].Resolve(world, sourceForErrorLogging);
            }
            for (int i = 0; i < Output.Length; i++)
            {
                ok &= Output[i].Resolve(world, sourceForErrorLogging);
            }

            return ok;
        }
        /// <summary>
        /// Serializes the enchantment
        /// </summary>
        /// <param name="writer"></param>
        public void ToBytes(BinaryWriter writer)
        {
            writer.Write(code);
            writer.Write(Ingredients.Length);
            writer.Write(processingHours);
            for (int i = 0; i < Ingredients.Length; i++)
            {
                Ingredients[i].ToBytes(writer);
            }
            
            for (int i = 0; i < ValidTargets.Length; i++)
            {
                ValidTargets[i].ToBytes(writer);
            }
            for (int i = 0; i < Enchantments.Length; i++)
            {
                Enchantments[i].ToBytes(writer);
            }
            
            for (int i = 0; i < Output.Length; i++)
            {
                Output[i].ToBytes(writer);
            }
        }

        /// <summary>
        /// Deserializes the enchantment
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="resolver"></param>
        public void FromBytes(BinaryReader reader, IWorldAccessor resolver)
        {
            code = reader.ReadString();
            Ingredients = new EnchantingRecipeIngredient[reader.ReadInt32()];

            for (int i = 0; i < Ingredients.Length; i++)
            {
                Ingredients[i] = new EnchantingRecipeIngredient();
                Ingredients[i].FromBytes(reader, resolver);
                Ingredients[i].Resolve(resolver, "Enchanting Recipe (FromBytes)");
            }
            
            for (int i = 0; i < ValidTargets.Length; i++)
            {
                ValidTargets[i] = new EnchantingRecipeIngredient();
                ValidTargets[i].FromBytes(reader, resolver);
                ValidTargets[i].Resolve(resolver, "Enchanting Recipe (FromBytes)");
            }
            for (int i = 0; i < Enchantments.Length; i++)
            {
                Enchantments[i] = new EnchantingRecipeOutput();
                Enchantments[i].FromBytes(reader, resolver.ClassRegistry);
                Enchantments[i].Resolve(resolver, "Enchanting Recipe (FromBytes)");

                
                for (int i = 0; i < Output.Length; i++)
                {
                    Output[i] = new EnchantingRecipeOutput();
                    Output[i].FromBytes(reader, resolver.ClassRegistry);
                    Output[i].Resolve(resolver, "Enchanting Recipe (FromBytes)");
                }

                processingHours = reader.ReadDouble();
            }
        }*/
    }
    #endregion
    #region Ingredient
    internal class EnchantingRecipeIngredientDepr
    {
        // DEPRECATED
        /*
        /// <summary>
        /// If set, the barrel may contain more, but it gets consumed by this amount
        /// </summary>
        // public int? ConsumeQuantity = null;
        // 
        // Summary:
        //     Item or Block
        // public EnumItemClass Type;
        // 
        // 
        // Summary:
        //     How much input items are required
        // public int Quantity = 1;
        // 
        // 
        // Summary:
        //     What attributes this itemstack must have
        // [JsonProperty]
        // [JsonConverter(typeof(JsonAttributesConverter))]
        // public JsonObject Attributes;
        // 
        // 
        // Summary:
        //     Optional attribute data that you can attach any data to
        // [JsonProperty]
        // [JsonConverter(typeof(JsonAttributesConverter))]
        // public JsonObject RecipeAttributes;
        // 
        // 
        // Summary:
        //     Whether this enchanting recipe ingredient should be regarded as a tool required
        //     to build this item. If true, the recipe will not consume the item but reduce
        //     its durability.
        // public bool IsTool;
        // 
        // 
        // Summary:
        //     If IsTool is set, this is the durability cost
        // public int ToolDurabilityCost = 1;
        // 
        // 
        // Summary:
        //     When using a wildcard in the item/block code, setting this field will limit the
        //     allowed variants
        // public string[] AllowedVariants;
        // 
        // 
        // Summary:
        //     When using a wildcard in the item/block code, setting this field will skip these
        //     variants
        // public string[] SkipVariants;
        // 
        // 
        // Summary:
        //     If set, the enchanting recipe will give back the consumed stack to be player upon
        //     enchanting
        // public JsonItemStack ReturnedStack;
        // 
        // 
        // Summary:
        //     The itemstack made from Code, Quantity and Attributes, populated by the engine
        // public ItemStack ResolvedItemstack;
        // 
        // 
        // Summary:
        //     Whether this recipe contains a wildcard, populated by the engine
        // public bool IsWildCard;
        // 
        // 
        // Summary:
        //     Code of the item or block
        // public AssetLocation Code { get; set; }
        // 
        // 
        // Summary:
        //     Name of the class, used for filling placeholders in the output stack
        // public string Name { get; set; }
        // public int minQuantity = 1;
        // public int maxQuantity = 1;
        // 
        // 
        // Summary:
        //     Fills in the placeholder ingredients for the enchanting recipe.
        // 
        // Parameters:
        //   key:
        // 
        //   value:
        *;
        /*
        public void FillPlaceHolder(string key, string value)
        {
            Code = Code.CopyWithPath(Code.Path.Replace("{" + key + "}", value));
            Attributes?.FillPlaceHolder(key, value);
            RecipeAttributes?.FillPlaceHolder(key, value);
        }*/
        /*
        //
        // Summary:
        //     Turns Type, Code and Attributes into an IItemStack
        //
        // Parameters:
        //   resolver:
        //
        //   sourceForErrorLogging:
        public bool Resolve(IWorldAccessor resolver, string sourceForErrorLogging)
        {
            if (ReturnedStack != null)
            {
                ReturnedStack.Resolve(resolver, sourceForErrorLogging + " recipe with output ", Code);
            }

            if (Code.Path.Contains('*'))
            {
                IsWildCard = true;
                return true;
            }

            if (Type == EnumItemClass.Block)
            {
                Block block = resolver.GetBlock(Code);
                if (block == null || block.IsMissing)
                {
                    resolver.Logger.Warning("Failed resolving enchanting recipe ingredient with code {0} in {1}", Code, sourceForErrorLogging);
                    return false;
                }

                ResolvedItemstack = new ItemStack(block, Quantity);
            }
            else
            {
                Item item = resolver.GetItem(Code);
                if (item == null || item.IsMissing)
                {
                    resolver.Logger.Warning("Failed resolving enchanting recipe ingredient with code {0} in {1}", Code, sourceForErrorLogging);
                    return false;
                }

                ResolvedItemstack = new ItemStack(item, Quantity);
            }

            if (Attributes != null)
            {
                IAttribute attribute = Attributes.ToAttribute();
                if (attribute is ITreeAttribute)
                {
                    ResolvedItemstack.Attributes = (ITreeAttribute)attribute;
                }
            }

            return true;
        }*/
        /*
        //
        // Summary:
        //     Checks whether or not the input satisfies as an ingredient for the recipe.
        //
        // Parameters:
        //   inputStack:
        //
        //   checkStacksize:
        public bool SatisfiesAsIngredient(ItemStack inputStack, bool checkStacksize = true)
        {
            if (inputStack == null)
            {
                return false;
            }

            if (IsWildCard)
            {
                if (Type != inputStack.Class)
                {
                    return false;
                }

                if (!WildcardUtil.Match(Code, inputStack.Collectible.Code, AllowedVariants))
                {
                    return false;
                }

                if (SkipVariants != null && WildcardUtil.Match(Code, inputStack.Collectible.Code, SkipVariants))
                {
                    return false;
                }

                if (checkStacksize && inputStack.StackSize < Quantity)
                {
                    return false;
                }
            }
            else
            {
                if (!ResolvedItemstack.Satisfies(inputStack))
                {
                    return false;
                }

                if (checkStacksize && inputStack.StackSize < ResolvedItemstack.StackSize)
                {
                    return false;
                }
            }

            return true;
        }*/
        /*
        public override void ToBytes(BinaryWriter writer)
        {
            writer.Write(IsWildCard);
            writer.Write((int)Type);
            writer.Write(Code.ToShortString());
            writer.Write(Quantity);
            if (!IsWildCard)
            {
                writer.Write(ResolvedItemstack != null);
                ResolvedItemstack?.ToBytes(writer);
            }

            writer.Write(IsTool);
            writer.Write(ToolDurabilityCost);
            writer.Write(AllowedVariants != null);
            if (AllowedVariants != null)
            {
                writer.Write(AllowedVariants.Length);
                for (int i = 0; i < AllowedVariants.Length; i++)
                {
                    writer.Write(AllowedVariants[i]);
                }
            }

            writer.Write(SkipVariants != null);
            if (SkipVariants != null)
            {
                writer.Write(SkipVariants.Length);
                for (int j = 0; j < SkipVariants.Length; j++)
                {
                    writer.Write(SkipVariants[j]);
                }
            }

            writer.Write(ReturnedStack?.ResolvedItemstack != null);
            if (ReturnedStack?.ResolvedItemstack != null)
            {
                ReturnedStack.ToBytes(writer);
            }

            if (RecipeAttributes != null)
            {
                writer.Write(value: true);
                writer.Write(RecipeAttributes.ToString());
            }
            else
            {
                writer.Write(value: false);
            }
        }
        public override void FromBytes(BinaryReader reader, IWorldAccessor resolver)
        {
            IsWildCard = reader.ReadBoolean();
            Type = (EnumItemClass)reader.ReadInt32();
            Code = new AssetLocation(reader.ReadString());
            Quantity = reader.ReadInt32();
            if (!IsWildCard && reader.ReadBoolean())
            {
                ResolvedItemstack = new ItemStack(reader, resolver);
            }

            IsTool = reader.ReadBoolean();
            ToolDurabilityCost = reader.ReadInt32();
            if (reader.ReadBoolean())
            {
                AllowedVariants = new string[reader.ReadInt32()];
                for (int i = 0; i < AllowedVariants.Length; i++)
                {
                    AllowedVariants[i] = reader.ReadString();
                }
            }
            if (reader.ReadBoolean())
            {
                SkipVariants = new string[reader.ReadInt32()];
                for (int j = 0; j < SkipVariants.Length; j++)
                {
                    SkipVariants[j] = reader.ReadString();
                }
            }
            if (reader.ReadBoolean())
            {
                ReturnedStack = new JsonItemStack();
                ReturnedStack.FromBytes(reader, resolver.ClassRegistry);
                ReturnedStack.ResolvedItemstack.ResolveBlockOrItem(resolver);
            }
            if (reader.ReadBoolean())
            {
                RecipeAttributes = new JsonObject(JToken.Parse(reader.ReadString()));
            }
        }
        */
        /*
        public T CloneTo<T>() where T : EnchantingRecipeIngredient, new()
        {
            T val = new T
            {
                Code = Code.Clone(),
                Type = Type,
                Name = Name,
                Quantity = Quantity,
                IsWildCard = IsWildCard,
                IsTool = IsTool,
                ToolDurabilityCost = ToolDurabilityCost,
                AllowedVariants = ((AllowedVariants == null) ? null : ((string[])AllowedVariants.Clone())),
                SkipVariants = ((SkipVariants == null) ? null : ((string[])SkipVariants.Clone())),
                ResolvedItemstack = ResolvedItemstack?.Clone(),
                ReturnedStack = ReturnedStack?.Clone(),
                RecipeAttributes = RecipeAttributes?.Clone()
            };
            if (Attributes != null)
            {
                val.Attributes = Attributes.Clone();
            }
        
            return val;
        }*/
        /*
        public new EnchantingRecipeIngredient Clone()
        {
            EnchantingRecipeIngredient stack = new EnchantingRecipeIngredient()
            {
                Code = Code.Clone(),
                Type = Type,
                Name = Name,
                Quantity = Quantity,
                IsWildCard = IsWildCard,
                IsTool = IsTool,
                AllowedVariants = AllowedVariants == null ? null : (string[])AllowedVariants.Clone(),
                ResolvedItemstack = ResolvedItemstack?.Clone(),
                ReturnedStack = ReturnedStack?.Clone()
            };
        
            if (Attributes != null) stack.Attributes = Attributes.Clone();
        
            return stack;
        }
        
        public override string ToString()
        {
            return Type.ToString() + " code " + Code;
        }*/
    }
    #endregion
    #region IRecipeBase
    /*
    public interface IEnchantingBase<T>
    {
        AssetLocation Name { get; set; }

        bool Enabled { get; set; }

        IRecipeIngredient[] Ingredients { get; }

        IRecipeOutput Output { get; }

        Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world);

        bool Resolve(IWorldAccessor world, string sourceForErrorLogging);

        T Clone();
    }*/
    #endregion
}
